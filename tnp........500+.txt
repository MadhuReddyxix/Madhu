#include <stdio.h> 
int main()  
{    
    int n; 
    printf("Enter the size of the array:"); 
    scanf("%d",&n); 
    int arr[n]; 
     
    printf("Enter the %d values to store it in array: \n", n); 
    for(int i=0;i<n;i++) 
    { 
        scanf("%d",&arr[i]); 
    } 
    printf("The values stored in the array are: \n");     
    for(int i=0;i<n;i++) 
    { 
        printf("%d \n",arr[i]); 
    } 
 } 
#include <stdio.h> 
#include <string.h> 
#include <stdbool.h> 
// Function to verify if a vehicle registration number is valid 
bool verifyRegistration(char registration[])  
{ 
// Check if the registration number has exactly 10 characters 
if (strlen(registration) != 10)  
{ 
return false; 
} 
// Check if the first two characters are alphabets (e.g., "KA" for Karnataka) 
for (int i = 0; i < 2; i++)  
{ 
} 
if (!isalpha(registration[i]))  
{ 
return false; 
} 
// Check if the next two characters are numbers (e.g., "09" for a specific district) 
for (int i = 2; i < 4; i++)  
{ 
} 
if (!isdigit(registration[i]))  
{ 
return false; 
} 
// Check if the next two characters are alphabets (e.g., "MN" for serial number) 
for (int i = 4; i < 6; i++) 
{ 
        if (!isalpha(registration[i]))  
        { 
            return false; 
        } 
    } 
 
    // Check if the penultimate two characters are numbers (e.g., "3865" for vehicle number) 
    for (int i = 6; i < 10; i++)  
    { 
        if (!isdigit(registration[i]))  
        { 
            return false; 
        } 
    } 
 
    return true; 
} 
 
int main() { 
    char registration[11];  
    printf("Enter a vehicle registration number: "); 
    scanf("%s", registration); 
 
    if (verifyRegistration(registration))  
    { 
        printf("Accept: Vehicle registration number is valid.\n"); 
    }  
    else  
    { 
        printf("Reject: Vehicle registration number is invalid.\n"); 
    } 
 
    return 0; 
}
#include <stdio.h> 
int main() { 
int m, n, p, q; 
printf("Enter the number of rows and columns of the first matrix: "); 
scanf("%d %d", &m, &n); 
printf("Enter the number of rows and columns of the second matrix: "); 
scanf("%d %d", &p, &q); 
if (n != p) { 
printf("Matrix multiplication is not possible. Column of the first matrix must be equal to 
the row of the second matrix.\n"); 
return 1; 
} 
int firstMatrix[m][n], secondMatrix[p][q], resultMatrix[m][q]; 
printf("Enter elements of the first matrix:\n"); 
for (int i = 0; i < m; i++) { 
for (int j = 0; j < n; j++) { 
scanf("%d", &firstMatrix[i][j]); 
} 
} 
printf("Enter elements of the second matrix:\n"); 
for (int i = 0; i < p; i++) { 
for (int j = 0; j < q; j++) { 
scanf("%d", &secondMatrix[i][j]); 
} 
} 
// Matrix multiplication 
for (int i = 0; i < m; i++) { 
for (int j = 0; j < q; j++) { 
resultMatrix[i][j] = 0; 
for (int k = 0; k < n; k++) {
resultMatrix[i][j] += firstMatrix[i][k] * secondMatrix[k][j]; 
} 
} 
} 
printf("Resultant matrix after multiplication:\n"); 
for (int i = 0; i < m; i++) { 
for (int j = 0; j < q; j++) { 
printf("%d ", resultMatrix[i][j]); 
} 
printf("\n"); 
} 
return 0; 
}
#include <stdio.h> 
int isValidSudoku(int board[9][9]) { 
// Check rows 
for (int i = 0; i < 9; i++) { 
int row[10] = {0}; 
for (int j = 0; j < 9; j++) { 
if (board[i][j] != 0 && row[board[i][j]] == 1) { 
return 0; // Invalid Sudoku 
} 
row[board[i][j]] = 1; 
} 
} 
// Check columns 
for (int j = 0; j < 9; j++) { 
int col[10] = {0}; 
for (int i = 0; i < 9; i++) { 
if (board[i][j] != 0 && col[board[i][j]] == 1) { 
return 0; // Invalid Sudoku 
} 
 col[board[i][j]] = 1; 
        } 
    } 
 
    // Check 3x3 subgrids 
    for (int block = 0; block < 9; block++) { 
        int subgrid[10] = {0}; 
        for (int i = block / 3 * 3; i < block / 3 * 3 + 3; i++) { 
            for (int j = block % 3 * 3; j < block % 3 * 3 + 3; j++) { 
                if (board[i][j] != 0 && subgrid[board[i][j]] == 1) { 
                    return 0; // Invalid Sudoku 
                } 
                subgrid[board[i][j]] = 1; 
            } 
        } 
    } 
 
    return 1; // Valid Sudoku 
} 
 
int main() { 
    int sudoku[9][9] = { 
        {5, 3, 0, 0, 7, 0, 0, 0, 0}, 
        {6, 0, 0, 1, 9, 5, 0, 0, 0}, 
        {0, 9, 8, 0, 0, 0, 0, 6, 0}, 
        {8, 0, 0, 0, 6, 0, 0, 0, 3}, 
        {4, 0, 0, 8, 0, 3, 0, 0, 1}, 
        {7, 0, 0, 0, 2, 0, 0, 0, 6}, 
        {0, 6, 0, 0, 0, 0, 2, 8, 0}, 
        {0, 0, 0, 4, 1, 9, 0, 0, 5}, 
        {0, 0, 0, 0, 8, 0, 0, 7, 9} 
    }; 
 
    if (isValidSudoku(sudoku)) { 
        printf("Valid Sudoku\n"); 
    } else { 
        printf("Invalid Sudoku\n"); 
    } 
 
    return 0; 
}
#include <stdio.h> 
// Define the structure for a student 
struct Student  
{ 
}; 
int studentID; 
char name[50]; 
char grade; 
float marks[5]; 
float averageMarks; 
// Function to calculate the average marks for a student 
void calculateAverage(struct Student *student)  
{ 
float totalMarks = 0.0; 
for (int i = 0; i < 5; i++)  
{ 
totalMarks += student->marks[i]; 
} 
student->averageMarks = totalMarks / 5; 
} 
// Function to assign grades based on average marks 
void assignGrades(struct Student *student)  
{ 
if (student->averageMarks >= 90)  
{
 student->grade = 'A'; 
    }  
    else if (student->averageMarks >= 80)  
    { 
        student->grade = 'B'; 
    }  
    else if (student->averageMarks >= 70)  
    { 
        student->grade = 'C'; 
    }  
    else if (student->averageMarks >= 60)  
    { 
        student->grade = 'D'; 
    }  
    else  
    { 
        student->grade = 'F'; 
    } 
} 
 
int main()  
{ 
    struct Student students[5]; 
 
    // Input student information 
    for (int i = 0; i < 5; i++)  
    { 
        printf("Enter Student ID: "); 
        scanf("%d", &students[i].studentID); 
        printf("Enter Name: "); 
        scanf("%s", students[i].name); 
 
        printf("Enter marks for 5 subjects:\n"); 
        for (int j = 0; j < 5; j++) { 
            printf("Subject %d: ", j + 1); 
            scanf("%f", &students[i].marks[j]); 
        } 
 
        // Calculate average marks and assign grades 
        calculateAverage(&students[i]); 
        assignGrades(&students[i]); 
    } 
 
    // Display student information 
    printf("\nStudent Information:\n"); 
    for (int i = 0; i < 5; i++)  
    { 
        printf("Student ID: %d\n", students[i].studentID); 
printf("Name: %s\n", students[i].name); 
printf("Average Marks: %.2f\n", students[i].averageMarks); 
printf("Grade: %c\n", students[i].grade); 
printf("\n"); 
} 
return 0; 
}
#include <stdio.h> 
// Define the structure for a student 
struct Student  
{ 
}; 
int studentID; 
char name[50]; 
char grade; 
float marks[5]; 
float averageMarks; 
// Function to calculate the average marks for a student 
void calculateAverage(struct Student *student)  
{ 
float totalMarks = 0.0; 
for (int i = 0; i < 5; i++)  
{ 
totalMarks += student->marks[i]; 
} 
student->averageMarks = totalMarks / 5; 
} 
// Function to assign grades based on average marks 
void assignGrades(struct Student *student)  
{ 
if (student->averageMarks >= 90) 
{ 
        student->grade = 'A'; 
    }  
    else if (student->averageMarks >= 80)  
    { 
        student->grade = 'B'; 
    }  
    else if (student->averageMarks >= 70)  
    { 
        student->grade = 'C'; 
    }  
    else if (student->averageMarks >= 60)  
    { 
        student->grade = 'D'; 
    }  
    else  
    { 
        student->grade = 'F'; 
    } 
} 
 
int main()  
{ 
    struct Student students[5]; 
    struct Student *studentPtr = students; 
 
    // Input student information 
    for (int i = 0; i < 5; i++)  
    { 
        printf("Enter Student ID: "); 
        scanf("%d", &studentPtr->studentID); 
        printf("Enter Name: "); 
        scanf("%s", studentPtr->name); 
 
        printf("Enter marks for 5 subjects:\n"); 
        for (int j = 0; j < 5; j++)  
        { 
            printf("Subject %d: ", j + 1); 
            scanf("%f", &studentPtr->marks[j]); 
        } 
 
        // Calculate average marks and assign grades 
        calculateAverage(studentPtr); 
        assignGrades(studentPtr); 
 
        // Move to the next student in the array 
        studentPtr++; 
    }
// Reset the pointer to the beginning of the array 
studentPtr = students; 
// Display student information 
printf("\nStudent Information:\n"); 
for (int i = 0; i < 5; i++)  
{ 
printf("Student ID: %d\n", studentPtr->studentID); 
printf("Name: %s\n", studentPtr->name); 
printf("Average Marks: %.2f\n", studentPtr->averageMarks); 
printf("Grade: %c\n", studentPtr->grade); 
printf("\n"); 
// Move to the next student in the array 
studentPtr++; 
} 
return 0; 
} 
#include <stdio.h> 
#include <stdlib.h> 
// Define a structure for a node in the linked list 
struct Node { 
int data; 
struct Node* next; 
}; 
// Define a structure for the stack 
struct Stack { 
struct Node* top; 
}; 
// Function to create an empty stack 
struct Stack* createStack() { 
struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack)); 
stack->top = NULL; 
return stack; 
} 
// Function to check if the stack is empty 
int isEmpty(struct Stack* stack) { 
return (stack->top == NULL); 
} 
// Function to push an element onto the stack 
void push(struct Stack* stack, int data) { 
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); 
newNode->data = data; 
newNode->next = stack->top; 
stack->top = newNode; 
printf("%d pushed to the stack\n", data); 
} 
// Function to pop an element from the stack 
int pop(struct Stack* stack) { 
if (isEmpty(stack)) { 
printf("Stack is empty. Cannot pop.\n"); 
return -1; // Return an invalid value 
} 
struct Node* temp = stack->top; 
int poppedData = temp->data; 
stack->top = temp->next; 
free(temp); 
return poppedData; 
} 
int main() { 
struct Stack* stack = createStack(); 
push(stack, 10); 
push(stack, 20); 
push(stack, 30); 
printf("%d popped from the stack\n", pop(stack)); 
printf("%d popped from the stack\n", pop(stack)); 
printf("%d popped from the stack\n", pop(stack)); 
printf("%d popped from the stack\n", pop(stack)); // Trying to pop from an empty stack 
return 0; 
}
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#define MAX_URL_LENGTH 100 
// Structure for a node in the stack 
typedef struct Node { 
char url[MAX_URL_LENGTH]; 
struct Node* next; 
} Node; 
// Structure for the stack 
typedef struct { 
Node* top; 
} Stack; 
// Function to initialize an empty stack 
void initialize(Stack* stack) { 
stack->top = NULL; 
} 
// Function to push a URL onto the stack 
void push(Stack* stack, const char* url) { 
Node* newNode = (Node*)malloc(sizeof(Node)); 
if (newNode == NULL) { 
printf("Memory allocation failed.\n"); 
return; 
} 
strncpy(newNode->url, url, MAX_URL_LENGTH); 
newNode->next = stack->top; 
stack->top = newNode; 
} 
// Function to pop a URL from the stack 
void pop(Stack* stack) { 
if (stack->top == NULL) { 
printf("No more URLs in the history.\n"); 
return; 
} 
Node* temp = stack->top; 
stack->top = stack->top->next; 
free(temp); 
} 
// Function to display the current URL 
void displayCurrentURL(Stack* stack) { 
if (stack->top == NULL) { 
printf("No URL currently loaded.\n"); 
} else { 
printf("Current URL: %s\n", stack->top->url); 
} 
} 
int main() { 
Stack historyStack; 
initialize(&historyStack); 
int choice; 
char url[MAX_URL_LENGTH]; 
while (1) { 
printf("\nMenu:\n"); 
printf("1. Visit a URL\n"); 
printf("2. Go Back\n"); 
printf("3. Display Current URL\n"); 
printf("4. Exit\n"); 
printf("Enter your choice: "); 
scanf("%d", &choice); 
switch (choice) { 
case 1: 
printf("Enter URL to visit: "); 
scanf("%s", url); 
push(&historyStack, url); 
break; 
case 2: 
pop(&historyStack); 
break; 
case 3: 
displayCurrentURL(&historyStack); 
break; 
case 4: 
// Clean up and exit the program 
while (historyStack.top != NULL) { 
pop(&historyStack); 
} 
return 0; 
default: 
printf("Invalid choice. Please try again.\n"); 
} 
} 
return 0; 
}
#include <stdio.h> 
#include <stdlib.h> 
// Structure to represent a node in the linked list 
struct Node  
{ 
}; 
int data; 
struct Node* next; 
// Structure to represent a queue 
struct Queue  
{ 
}; 
struct Node* front; 
struct Node* rear; 
// Function to initialize an empty queue 
struct Queue* createQueue()  
{ 
struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue)); 
queue->front = queue->rear = NULL; 
return queue; 
} 
// Function to check if the queue is empty 
int isEmpty(struct Queue* queue)  
{ 
return (queue->front == NULL);
} 
 
// Function to enqueue an element to the rear of the queue 
void enqueue(struct Queue* queue, int data)  
{ 
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); 
    newNode->data = data; 
    newNode->next = NULL; 
     
    if (isEmpty(queue))  
    { 
        queue->front = queue->rear = newNode; 
    } else  
    { 
        queue->rear->next = newNode; 
        queue->rear = newNode; 
    } 
} 
 
// Function to dequeue an element from the front of the queue 
int dequeue(struct Queue* queue)  
{ 
    if (isEmpty(queue))  
    { 
        printf("Queue underflow: Cannot dequeue from an empty queue.\n"); 
        return -1; // Error value 
    } 
     
    struct Node* temp = queue->front; 
    int data = temp->data; 
    queue->front = queue->front->next; 
     
    free(temp); 
     
    return data; 
} 
 
// Function to display the elements of the queue 
void display(struct Queue* queue)  
{ 
    if (isEmpty(queue))  
    { 
        printf("Queue is empty.\n"); 
        return; 
    } 
     
    struct Node* current = queue->front; 
    printf("Queue elements: "); 
     
    while (current != NULL)  
{ 
printf("%d ", current->data); 
current = current->next; 
} 
printf("\n"); 
} 
int main()  
{ 
struct Queue* queue = createQueue(); 
enqueue(queue, 10); 
enqueue(queue, 20); 
enqueue(queue, 30); 
display(queue); 
printf("Dequeued element: %d\n", dequeue(queue)); 
display(queue); 
printf("Is the queue empty? %s\n", isEmpty(queue) ? "Yes" : "No"); 
return 0; 
}
import java.util.Scanner;
public class Main {
	public static boolean isPerfectNumber(int number) {
		int sum = 0;
		for (int i = 1; i <= number / 2; i++) {
			if (number % i == 0) {
			
				sum += i;
			}
		}
		return sum == number;
	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		System.out.print("Enter a number: ");
		int number = scanner.nextInt();
		if (isPerfectNumber(number)) {
			System.out.println(number + " is a perfect number.");
		} else {
			System.out.println(number + " is not a perfect number.");
		}
		scanner.close();
	}
}
import java.util.*;
public class Main {
    public static void main(String[] args) {
        // Scanner to take input from the user
        Scanner scanner = new Scanner(System.in);
        
        // Ask the user for a number
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        
        System.out.println("Factor pairs of " + number + " are: ");
        
        // Loop to find factor pairs
        for (int i = 1; i <= Math.sqrt(number); i++) {
            if (number % i == 0) { // Check if i is a factor
                // If i is a factor, the pair is (i, number/i)
                int pair = number / i;
                System.out.println(i + " and " + pair);
            }
        }
        scanner.close();
    }
}
import java.util.Scanner;
public class Main {
    
    // Function to compute GCD using Euclidean algorithm
    public static int findGCD(int a, int b) {
        // If b is 0, the GCD is a
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Input two numbers
        System.out.print("Enter the first number: ");
        int num1 = scanner.nextInt();
        
        System.out.print("Enter the second number: ");
        int num2 = scanner.nextInt();
        
        // Find and display the GCD
        int gcd = findGCD(num1, num2);
        System.out.println("The GCD of " + num1 + " and " + num2 + " is: " + gcd);
        
        scanner.close();
    }
}
import java.util.Scanner;
public class Main {
    // Function to check if a number is prime using the flag method
    public static boolean isPrime(int num) {
        // Prime numbers are greater than 1
        if (num <= 1) {
            return false;
        }
        // Set flag to true, assuming the number is prime
        boolean isPrimeFlag = true;
        // Check for factors from 2 to sqrt(num)
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) { // If divisible, it's not a prime number
                isPrimeFlag = false; // Set flag to false
                break; // No need to check further
            }
        }
        // Output factors of the number
        System.out.print("Factors of " + num + ": ");
        for (int i = 1; i <= num; i++) {
            if (num % i == 0) {
                System.out.print(i + " "); // Print all factors
            }
        }
        // If the flag is still true, it's prime
        if (isPrimeFlag) {
            System.out.println("(Prime number)");
        } else {
            System.out.println("(Not a prime number)");
        }
        return isPrimeFlag;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        // Input the limit up to which we need to find primes
        System.out.print("Enter the limit: ");
        int limit = scanner.nextInt();
        System.out.println("Checking numbers up to " + limit + ":");
        // Check each number up to the limit
        for (int i = 2; i <= limit; i++) {
            isPrime(i);
        }
        scanner.close();
    }
}
import java.util.ArrayList;
import java.util.List;
public class User {
    private String username;
    private String password;
    private List<Post> posts;
    private List<User> following;
    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.posts = new ArrayList<>();
        this.following = new ArrayList<>();
    }
    public String getUsername() {
        return username;
    }
    public String getPassword() {
        return password;
    }
    public List<Post> getPosts() {
        return posts;
    }
    public List<User> getFollowing() {
        return following;
    }
    public void addPost(Post post) {
        posts.add(post);
    }
    public void followUser(User user) {
        if (!following.contains(user)) {
            following.add(user);
        }
    }
    public void unfollowUser(User user) {
        following.remove(user);
    }
}
import java.util.ArrayList;
import java.util.List;
public class Post {
    private String content;
    private User author;
    private List<Comment> comments;
    private List<User> likes;
    public Post(String content, User author) {
        this.content = content;
        this.author = author;
        this.comments = new ArrayList<>();
        this.likes = new ArrayList<>();
    }
    public String getContent() {
        return content;
    }
    public User getAuthor() {
        return author;
    }
    public List<Comment> getComments() {
        return comments;
    }
    public List<User> getLikes() {
        return likes;
    }
    public void addComment(Comment comment) {
        comments.add(comment);
    }
    public void addLike(User user) {
        if (!likes.contains(user)) {
            likes.add(user);
        }
    }
}
public class Comment {
    private String content;
    private User author;
    public Comment(String content, User author) {
        this.content = content;
        this.author = author;
    }
    public String getContent() {
        return content;
    }
    public User getAuthor() {
        return author;
    }
}
import java.util.HashMap;
import java.util.Map;
public class SocialNetwork {
    private Map<String, User> users;
    public SocialNetwork() {
        this.users = new HashMap<>();
    }
    public User registerUser(String username, String password) {
        if (!users.containsKey(username)) {
            User user = new User(username, password);
            users.put(username, user);
            return user;
        } else {
            System.out.println("Username already exists.");
            return null;
        }
    }
    public User loginUser(String username, String password) {
        User user = users.get(username);
        if (user != null && user.getPassword().equals(password)) {
            return user;
        } else {
            System.out.println("Invalid username or password.");
            return null;
        }
    }
    public void addPost(User user, String content) {
        if (user != null) {
            Post post = new Post(content, user);
            user.addPost(post);
        }
    }
    public void addComment(User user, Post post, String content) {
        if (user != null && post != null) {
            Comment comment = new Comment(content, user);
            post.addComment(comment);
        }
    }
    public void likePost(User user, Post post) {
        if (user != null && post != null) {
            post.addLike(user);
        }
    }
    public void followUser(User follower, User followee) {
        if (follower != null && followee != null) {
            follower.followUser(followee);
        }
    }
    public void unfollowUser(User follower, User followee) {
        if (follower != null && followee != null) {
            follower.unfollowUser(followee);
        }
    }
    public void displayPosts(User user) {
        if (user != null) {
            for (Post post : user.getPosts()) {
                System.out.println("Post: " + post.getContent());
                System.out.println("Likes: " + post.getLikes().size());
                System.out.println("Comments:");
                for (Comment comment : post.getComments()) {
                    System.out.println("  " + comment.getAuthor().getUsername() + ": " + comment.getContent());
                }
            }
        }
    }
    public void displayFeed(User user) {
        if (user != null) {
            for (User followee : user.getFollowing()) {
                System.out.println(followee.getUsername() + "'s posts:");
                displayPosts(followee);
            }
        }
    }
}
public class Main {
    public static void main(String[] args) {
        SocialNetwork socialNetwork = new SocialNetwork();
        // Register users
        User user1 = socialNetwork.registerUser("john_doe", "password123");
        User user2 = socialNetwork.registerUser("jane_doe", "password456");
        // User login
        User loggedInUser1 = socialNetwork.loginUser("john_doe", "password123");
        User loggedInUser2 = socialNetwork.loginUser("jane_doe", "password456");
        // Add posts
        socialNetwork.addPost(loggedInUser1, "Hello, this is my first post!");
        socialNetwork.addPost(loggedInUser2, "Hi everyone, glad to be here!");
        // Add comments
        if (loggedInUser1 != null && loggedInUser1.getPosts().size() > 0) {
            Post post1 = loggedInUser1.getPosts().get(0);
            socialNetwork.addComment(loggedInUser2, post1, "Nice to see you here!");
        }
        // Like posts
        if (loggedInUser1 != null && loggedInUser2 != null && loggedInUser2.getPosts().size() > 0) {
            Post post2 = loggedInUser2.getPosts().get(0);
            socialNetwork.likePost(loggedInUser1, post2);
        }
        // Follow users
        socialNetwork.followUser(loggedInUser1, loggedInUser2);
        // Display posts
        socialNetwork.displayPosts(loggedInUser1);
        socialNetwork.displayPosts(loggedInUser2);
        // Display feed
        socialNetwork.displayFeed(loggedInUser1);
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
public class LanguageLearningApp {
    private static Scanner scanner = new Scanner(System.in);
    private static HashMap<String, User> users = new HashMap<>();
    private static User loggedInUser;
    public static void main(String[] args) {
        boolean running = true;
        while (running) {
            System.out.println("Welcome to the Language Learning App!");
            System.out.println("1. Register");
            System.out.println("2. Login");
            System.out.println("3. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            switch (choice) {
                case 1:
                    register();
                    break;
                case 2:
                    login();
                    break;
                case 3:
                    running = false;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
        System.out.println("Thank you for using the Language Learning App!");
    }
    private static void register() {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        if (users.containsKey(username)) {
            System.out.println("Username already taken. Please choose another one.");
        } else {
            users.put(username, new User(username, password));
            System.out.println("Registration successful!");
        }
    }
    private static void login() {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        User user = users.get(username);
        if (user != null && user.getPassword().equals(password)) {
            System.out.println("Login successful!");
            loggedInUser = user;
            userMenu();
        } else {
            System.out.println("Invalid username or password. Please try again.");
        }
    }
    private static void userMenu() {
        boolean loggedIn = true;
        while (loggedIn) {
            System.out.println("Welcome, " + loggedInUser.getUsername() + "!");
            System.out.println("1. Add Vocabulary");
            System.out.println("2. View Vocabulary");
            System.out.println("3. Take Quiz");
            System.out.println("4. Logout");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            switch (choice) {
                case 1:
                    addVocabulary();
                    break;
                case 2:
                    viewVocabulary();
                    break;
                case 3:
                    takeQuiz();
                    break;
                case 4:
                    loggedIn = false;
                    loggedInUser = null;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
    private static void addVocabulary() {
        System.out.print("Enter word: ");
        String word = scanner.nextLine();
        System.out.print("Enter translation: ");
        String translation = scanner.nextLine();
        loggedInUser.addVocabulary(word, translation);
        System.out.println("Vocabulary added!");
    }
    private static void viewVocabulary() {
        List<Vocabulary> vocabularies = loggedInUser.getVocabulary();
        if (vocabularies.isEmpty()) {
            System.out.println("No vocabulary added yet.");
        } else {
            System.out.println("Your Vocabulary:");
            for (Vocabulary vocab : vocabularies) {
                System.out.println(vocab.getWord() + " - " + vocab.getTranslation());
            }
        }
    }
    private static void takeQuiz() {
        List<Vocabulary> vocabularies = loggedInUser.getVocabulary();
        if (vocabularies.isEmpty()) {
            System.out.println("No vocabulary to quiz on. Please add some vocabulary first.");
            return;
        }
        Random random = new Random();
        int score = 0;
        for (int i = 0; i < 5; i++) {
            Vocabulary vocab = vocabularies.get(random.nextInt(vocabularies.size()));
            System.out.print("Translate " + vocab.getWord() + ": ");
            String answer = scanner.nextLine();
            if (answer.equalsIgnoreCase(vocab.getTranslation())) {
                System.out.println("Correct!");
                score++;
            } else {
                System.out.println("Incorrect. The correct translation is " + vocab.getTranslation());
            }
        }
        System.out.println("Quiz completed! Your score: " + score + "/5");
    }
}
class User {
    private String username;
    private String password;
    private List<Vocabulary> vocabulary;
    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.vocabulary = new ArrayList<>();
    }
    public String getUsername() {
        return username;
    }
    public String getPassword() {
        return password;
    }
    public void addVocabulary(String word, String translation) {
        this.vocabulary.add(new Vocabulary(word, translation));
    }
    public List<Vocabulary> getVocabulary() {
        return vocabulary;
    }
}
class Vocabulary {
    private String word;
    private String translation;
    public Vocabulary(String word, String translation) {
        this.word = word;
        this.translation = translation;
    }
    public String getWord() {
        return word;
    }
    public String getTranslation() {
        return translation;
    }
